name: Build
run-name: ${{ github.event.inputs.is_custom == 'true' && format('Custom build of {0}/{1}', github.event.inputs.repository, github.event.inputs.branch) || format('Official build of {0}', github.event.inputs.ref) }}

on:
  schedule:
    - cron: '0 18 * * *'
    - cron: '0 19 * * *'
    - cron: '0 6 * * *'
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      is_custom:
        description: 'Set to true for custom builds from a fork/branch'
        required: true
        type: boolean
        default: false
      repository:
        description: 'Repository to build from (e.g., zenigor/zed). Only for custom builds.'
        required: false
        default: 'zed-industries/zed'
      branch:
        description: 'Branch to build from (e.g., feat/hover-translation). Only for custom builds.'
        required: false
        default: 'main'
      ref:
        description: 'Official tag to build (e.g., v0.129.0). Only for official builds.'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  checks:
    name: "Run checks"
    runs-on: ubuntu-22.04
    outputs:
      ref: ${{ steps.version_check.outputs.ref }}
      repository: ${{ steps.version_check.outputs.repository }}
      is_custom: ${{ steps.version_check.outputs.is_custom }}
      build_flag: ${{ steps.version_check.outputs.build_flag }}
    steps:
      - name: Version check
        id: version_check
        run: |
          if [[ "${{ github.event.inputs.is_custom }}" == "true" ]]; then
            echo "Custom build triggered."
            echo "Repository: ${{ github.event.inputs.repository }}"
            echo "Branch: ${{ github.event.inputs.branch }}"
            echo "is_custom=true" >> $GITHUB_OUTPUT
            echo "repository=${{ github.event.inputs.repository }}" >> $GITHUB_OUTPUT
            echo "ref=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
            echo "build_flag=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "is_custom=false" >> $GITHUB_OUTPUT
          echo "repository=zed-industries/zed" >> $GITHUB_OUTPUT
          input_ref="${{ github.event.inputs.ref }}"
          zed_url="https://api.github.com/repos/zed-industries/zed/releases"
          this_url="https://api.github.com/repos/pirafrank/zed_unofficial_win_builds/releases"

          echo "Fetching latest non-draft releases from Zed repo..."
          latest_stable_zed="$(curl -sL ${zed_url} | jq -r '[.[] | select(.prerelease == false and .draft == false)][0].tag_name')"
          latest_pre_zed="$(curl -sL ${zed_url} | jq -r '[.[] | select(.prerelease == true and .draft == false)][0].tag_name')"
          echo "Latest stable version: ${latest_stable_zed}"
          echo "Latest pre-release: ${latest_pre_zed}"
          
          echo "Fetching published versions for current repo..."
          curl -sL ${this_url} | jq -r '.[].tag_name' > published_versions

          # if input is not empty and not in published versions, use it
          if [[ ! -z "${input_ref}" ]] ; then
            echo "Input version provided: ${input_ref}"
            if ! grep -Fxq "${input_ref}" published_versions ; then
              echo "Version provided in input has not been published. Using ${input_ref}."
              echo "ref=${input_ref}" >> $GITHUB_OUTPUT
              echo "build_flag=true" >> $GITHUB_OUTPUT
            else
              echo "Version provided in input has already been published. Nothing to build."
              echo "build_flag=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          echo "No input provided, checking the latest stable version."
          if ! grep -Fxq "${latest_stable_zed}" published_versions ; then
            echo "${latest_stable_zed} not published. Using it."
            echo "ref=${latest_stable_zed}" >> $GITHUB_OUTPUT
            echo "build_flag=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Latest stable version has already been published. Checking latest pre-release."
          if ! grep -Fxq "${latest_pre_zed}" published_versions ; then
            echo "${latest_pre_zed} not published. Using it."
            echo "ref=${latest_pre_zed}" >> $GITHUB_OUTPUT
            echo "build_flag=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Nothing to build. All versions candidate to be built are already published."
          echo "build_flag=false" >> $GITHUB_OUTPUT
  build:
    name: "Build Zed"
    runs-on: windows-latest
    needs: [checks]
    if: ${{ needs.checks.outputs.build_flag == 'true' }}
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      zed_zip_sha256: ${{ steps.zed-build.outputs.zed_zip_sha256 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Zed
        uses: actions/checkout@v4
        with:
            repository: ${{ needs.checks.outputs.repository }}
            ref: ${{ needs.checks.outputs.ref }}
            path: zed

      - name: Build Zed
        id: zed-build
        uses: ./.github/actions/zed-build

      - name: Extract clean version
        id: extract_version
        if: ${{ needs.checks.outputs.is_custom != 'true' }}
        shell: bash
        run: |
            # version in release notes URL and in scoop bucket has no 'v' prefix, stripping
            version="${{ needs.checks.outputs.ref }}"
            if [[ "${version}" == v* ]]; then
              version="${version:1}"
            fi
            echo "Extracted version: ${version}"
            echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Create URL for release notes
        id: rel_notes
        if: ${{ needs.checks.outputs.is_custom != 'true' }}
        shell: bash
        run: |
            version="${{ steps.extract_version.outputs.version }}"
            # if version contains a hyphen, it is a pre-release
            # pre-release versions have their own URL path on zed.dev
            if [[ "${version}" == *-* ]]; then
                # remove the hyphen and anything after it
                version="${version%%-*}"
                url="https://zed.dev/releases/preview/${version}"
            else
                url="https://zed.dev/releases/stable/${version}"
            fi
            echo "Relese Notes URL: ${url}"
            echo url=${url}>> $GITHUB_OUTPUT

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./zed/target/release/zed.zip
            ./zed/target/release/zed.exe.sha256
            ./zed/target/release/zed.zip.sha256
          name: ${{ needs.checks.outputs.is_custom == 'true' && format('Build from branch {0}', needs.checks.outputs.ref) || needs.checks.outputs.ref }}
          tag_name: ${{ needs.checks.outputs.is_custom == 'true' && format('build-branch-{0}', needs.checks.outputs.ref) || needs.checks.outputs.ref }}
          body: ${{ needs.checks.outputs.is_custom == 'true' && format('Custom build from repository `{0}` and branch `{1}`.', needs.checks.outputs.repository, needs.checks.outputs.ref) || format('Release notes for `{0}` are available here: {1}', needs.checks.outputs.ref, steps.rel_notes.outputs.url) }}
          generate_release_notes: false
          draft: ${{ needs.checks.outputs.is_custom == 'true' }}
          prerelease: ${{ needs.checks.outputs.is_custom == 'true' || contains(needs.checks.outputs.ref, 'pre') || contains(needs.checks.outputs.ref, '-') }}
          make_latest: ${{ needs.checks.outputs.is_custom != 'true' }}
          fail_on_unmatched_files: true
          # no need to specify GITHUB_TOKEN here, it is automatically provided by GitHub Actions
          # https://github.com/softprops/action-gh-release#-customizing
          # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication

  scoop:
    name: "Update scoop bucket"
    runs-on: ubuntu-22.04
    needs: [checks, build]
    # only commit to update the scoop bucket if built successfully
    if: ${{ needs.build.result == 'success' && needs.checks.outputs.is_custom != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update scoop bucket
        shell: bash
        id: scoop_update
        run: |
            if [[ ${{ needs.checks.outputs.ref }} =~ 'pre' ]]; then
                json_file="bucket/zed-preview.json"
                template_file="bucket/zed-preview.template.json"
            else
                json_file="bucket/zed.json"
                template_file="bucket/zed.template.json"
            fi

            rm -f "${json_file}"
            cp -a "${template_file}" "${json_file}"
            sed -i "s,VERSION_PLACEHOLDER,${{ needs.build.outputs.version }},g" "${json_file}"
            sed -i "s,SHA256_PLACEHOLDER,${{ needs.build.outputs.zed_zip_sha256 }},g" "${json_file}"
            echo "file=${json_file}" >> $GITHUB_OUTPUT

      # make a signed commit with changed to zed.json file
      - name: Commit scoop bucket update
        id: commit_changes
        uses: pirafrank/github-commit-sign@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: "commit --owner=${{ github.repository_owner }} --repo=${{ github.event.repository.name }} --branch=${{ github.ref_name }} --commitMessage='scoop bucket update for ${{ needs.checks.outputs.ref }}' --changed ${{ steps.scoop_update.outputs.file }}"

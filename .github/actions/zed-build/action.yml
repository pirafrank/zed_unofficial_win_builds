name: Zed Build
description: Perform a Zed build for Windows
outputs:
  zed_zip_sha256:
    description: SHA256 checksum of the zed.zip artifact
    value: ${{ steps.checksum.outputs.zed_zip_sha256 }}
runs:
  using: "composite"
  steps:
  - name: Enable long paths in Windows
    shell: pwsh
    run: |
      New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
      git config --global core.longpaths true


  - name: Extract toolchain channel
    id: extract_toolchain
    working-directory: ${{ github.workspace }}\zed
    shell: bash
    run: |
        TOOLCHAIN_CHANNEL=$(grep 'channel' rust-toolchain.toml | cut -d '"' -f 2)
        echo "Toolchain channel: $TOOLCHAIN_CHANNEL"
        echo "TOOLCHAIN_CHANNEL=$TOOLCHAIN_CHANNEL" >> $GITHUB_OUTPUT

  - name: Setup Rust
    uses: actions-rust-lang/setup-rust-toolchain@v1
    with:
        toolchain: ${{ steps.extract_toolchain.outputs.TOOLCHAIN_CHANNEL }}
        target: "wasm32-wasip1"

  - name: Show Rust toolchain info
    shell: pwsh
    run: |
        rustc --version
        rustup show

  - name: Add msbuild to PATH
    uses: microsoft/setup-msbuild@v2
    with:
        msbuild-architecture: x64

  - name: Install Windows 10 SDK
    uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
    with:
        sdk-version: 26100

  - name: Build project
    working-directory: ${{ github.workspace }}\zed
    shell: pwsh
    # zed may be set to run the exe after the build, this
    # won't work in an headless environment. The build at this
    # point is likely to have completed successfully.
    continue-on-error: false
    env:
        RUSTFLAGS: "-C symbol-mangling-version=v0 --cfg tokio_unstable --cfg windows_slim_errors -C target-feature=+crt-static -C link-args=/NODEFAULTLIB:msvcrt -C link-args=/DEFAULTLIB:libcmt"
    run: |
        cargo build --release --verbose

  - name: Compress build artifacts
    working-directory: ${{ github.workspace }}\zed\target\release
    shell: pwsh
    run: |
      Compress-Archive -Path zed.exe -Destination zed.zip

  - name: Calculate SHA256 checksum
    id: checksum
    working-directory: ${{ github.workspace }}/zed/target/release
    shell: bash
    run: |
        sha256sum zed.exe > zed.exe.sha256
        sha256sum zed.zip > zed.zip.sha256
        echo "zed_zip_sha256=$(cat zed.zip.sha256 | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
